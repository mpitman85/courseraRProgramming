my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) +c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
bye()
rm(list=ls())
ls()
swirl()
ls()
list.files()
?list.files
args(list.files)
old.dir<-getwd()
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
args(file.rename)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
play()
?file.path
nxt()
file.path(folder1 and folder2)
file.path('folder1' and 'folder2')
file.path()
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir3")
)
dir.create(file.path('testdir2', 'testdir3'), recursive=TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5,10, length=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
seq(1:length(my_seq))
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char, "Megan")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix(1:20, nrow=4, ncol=5)
my_matrix<-matrix(1:20, nrow=4, ncol=5)
my_matrix2<-matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
info()
my_matrix2 <- matrix(1:20, 4,5)
play()
matrix(1:20, nrow=4, ncol=5)
mine<- matrix(1:20, nrow=4, ncol=5)
mine
nxt()
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients<- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)<-my_data
colnames(my_data)<-cnames
my_data
bye()
x<-c("a", "b", "c", "d")
for(i in 1:4){
print(x[i])
}
for(i in seq_along(x)){
print(x[i])
}
for(letter in x){
print(letters)
}
for(letter in x){
print(letter)
}
for(i in 1:4) print(x[i])
x<-matrix(1:6,2,3)
x
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
while(count < 10) {
print(count)
count <- count + 1
}
count<-0
while(count < 10) {
print(count)
count <- count + 1
}
z<-5
while(z>=3 && z<=10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coint == 1) {
z <- z+1
} else {
z <- z-1
}
}
while(z>=3 && z<=10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {
z <- z+1
} else {
z <- z-1
}
}
add2<- function(x,y) {
x+y
}
add2(5,3)
above <- function(x,n) {
use <- x > n
x[use]
}
add2<- function(x,y) {
x+y
}
add2(5,3)
above <- function(x, n) {
use <- x>n
x[use]
}
above10 <- function(x) {
use <- x > 10
x[use]
}
x <- 1:20
above(x)
above(x, 12)
above <- function(x, n = 10) {
use <- x>n
x[use]
}
above(x)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmeans(airquality)
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmeans(airquality, FALSE)
columnmean(airquality, FALSE)
mydata <- rnorm(100)
sd(mydata)
sd(x=mydata)
sd(x=mydata, na.rm=False)
sd(x=mydata, na.rm=FALSE)
sd(na.rm=FALSE, x=mydata)
args(lm)
args(sd)
f ,- function(a,b=1, c=2, d=NULL) {
}
f <- function(a,b) {
aâˆ§2
}
f <- function(a,b) {
a^2
}
f(2)
f <- function(a,b) {
print(a)
print(b)
}
f(45)
args(paste)
lm
lm <- function(x) {x*x}
lm
search()
f <- function(x,y){
x^2 +y / z
}
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
ls(environment(cube))
get("n", environment(cube))
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(unclass(p))
p$sec
unclass(x)
x$sec
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
x <- as.Date("2012-01-01")
y <- strptime("9 Jan 2011 11:34:21", "%d %b %Y %H:%M:%S")
x-y
x <- as.POSIXlt(x)
x-y
class(x)
class(y)
x <- as.Date("2012-01-01")
class(x)
library(swirl)
rm(list=ls())
ls()
swirl()
bye()
swirl()
TRUE==TRUE
(FALSE==TRUE) == FALSE
6==7
6<7
10 <= 10
5 !=7
!5 != !7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 $$ 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
function(x){
print(x)}
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(stdev, c(1.4, 3.6, 7.9, 8.8))
?std
??std
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("this is fun!")
submit()
mad_libs("the Death Star", "sunny", "horse")
play()
mad_libs <- function(...){
args <- list(...)
place <- args[["place"]]
adjective <- args [["adjective"]]
noun <- args [["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
mad_libs("the Death Star", "sunny", "horse")
mad_libs(the Death Star, sunny, horse)
nxt()
submit()
"I" %p% "love" %p% "R!"
d! <- Sys.Date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass()
unclass(d2)
t1 <- Sys.time()
t1
class()
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
rm(list=ls())
ls()
cube <- function(x,n) {
x^3
}
cube(3)
x <- 10
if(x>5){
x <- 0
}
x <- 10
if(x>5){
x <- 0
}
x <- 1:10
if(x>5){
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x<3) {
NA
} else {
10
}
y
cube <- function(x,n) {
x^3
}
cube(3)
x <- 1:10
if(x>5){
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <-10
f(3)
x <- 5
y <- if(x<3) {
NA
} else {
10
}
y
?mean
getwd()
setwd("~/Dropbox/Projects/Classe/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming")
setwd("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata")
getwd()
read.csv("001.csv")
data001 <- read.csv("001.csv")
data001
data002 <- read.csv("002.csv")
head(data001)
class(data001)
totaldata <- c(data001, data002)
length(data001)
dims(data001)
dim(data001)
dim(totaldata)
totaldata <- c(data001, data002)
totaldata
totaldata <- rbind(data001, data002)
totaldata
dim(data001)
dim(totaldata)
head(data001)
mean(totaldata$sulfate, na.rm=TRUE)
read.csv("1.csv")
?list.files
list.files("specdata")
?lappy
?lapply
filenames <- list.files("~/Dropbox/Projects/Classes/Coursera/
DataScienceSpecialization/RProgramming/courseraRProgramming/
specdata")
filenames
?list.files
filenames <- list.files("~/Dropbox/Projects/Classes/Coursera/
DataScienceSpecialization/RProgramming/courseraRProgramming/
specdata", full.names=TRUE)
filenames
read.csv("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/
RProgramming/courseraRProgramming/specdata/001.csv")
read.csv(001.csv,"~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/
RProgramming/courseraRProgramming/specdata")
)
cancel
erro
end
"
read.csv(001.csv,"~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/
RProgramming/courseraRProgramming/specdata")
"
read.csv("001.csv","~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/
RProgramming/courseraRProgramming/specdata")
?read.csv
