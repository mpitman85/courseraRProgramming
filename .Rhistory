y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix(1:20, nrow=4, ncol=5)
my_matrix<-matrix(1:20, nrow=4, ncol=5)
my_matrix2<-matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
info()
my_matrix2 <- matrix(1:20, 4,5)
play()
matrix(1:20, nrow=4, ncol=5)
mine<- matrix(1:20, nrow=4, ncol=5)
mine
nxt()
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients<- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)<-my_data
colnames(my_data)<-cnames
my_data
bye()
x<-c("a", "b", "c", "d")
for(i in 1:4){
print(x[i])
}
for(i in seq_along(x)){
print(x[i])
}
for(letter in x){
print(letters)
}
for(letter in x){
print(letter)
}
for(i in 1:4) print(x[i])
x<-matrix(1:6,2,3)
x
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
while(count < 10) {
print(count)
count <- count + 1
}
count<-0
while(count < 10) {
print(count)
count <- count + 1
}
z<-5
while(z>=3 && z<=10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coint == 1) {
z <- z+1
} else {
z <- z-1
}
}
while(z>=3 && z<=10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {
z <- z+1
} else {
z <- z-1
}
}
add2<- function(x,y) {
x+y
}
add2(5,3)
above <- function(x,n) {
use <- x > n
x[use]
}
iris
colMeans(iris)
apply(iris[,1:4], 2, mean)
apply(iris,1,mean)
apply(iris, 2, mean)
apply(iris[,1:4,1,mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
names(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
avghp
avghp$4
avghp[,1]
avghp[1,1]
avghp[1]
avghp[3]
answer <- avghp[3] - avghp[1]
answer
round(answer)
##question 5
debug(ls)
ls()
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern)
{
if (!missing(name)) {
exit()
exit()
undebug(ls)
library(datasets)
data(iris)
names(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[,1:4], 2, mean)
library(datasets)
data(mtcars)
names(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars,2,mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
avghp
avghp[1]
avghp[3]
answer <- avghp[3] - avghp[1]
answer
round(answer)
makeVector <- function(x=numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector()
cachemean()
specialvector <- makeVector()
cachemean(specialvector)
data <- numeric(sample(1:1000, 100, replace=TRUE))
data <- numeric(sample(1:100, 50, replace=TRUE))
data <- numeric(sample(1:100, 50)
)
sample(1:100, 20)
sample(1:100, 50)
data <- numeric(c(sample(1:100, 50)))
data <- sample(1:100, 50)))
data <- sample(1:100, 50)
data
makeVector(data)
cachemean(data)
class(data)
data <- as.numeric(data)
class(data)
makeVector(data)
cachemean(data)
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
data <- sample(1:100, 50)
data <- as.numeric(data)
class(data)
makeVector(data)
cachemean(data)
makeVector()
cachemean(x)
makeVector()
cachemean(data)
data <- sample(1:100, 50)
data <- as.numeric(data)
class(data)
test <- makeVector(data)
cachemean(test)
cachemean(test)
cachemean(makeVector(data))
cachemean(makeVector(data))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function()x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
makeCacheMatrix()
?solve
test <- rbind(c(1, 2), c(3,4))
test
class(test)
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function()x
setmatrix <- function(matrix) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
test <- rbind(c(1, 2), c(3,4))
test
class(test)
mat <- makeCacheMatrix(test)
mat
cacheSolve(mat)
cacheSolve(mat)
inv <- cacheSolve(mat)
test*inv
test %*% inv
test
test <- rbind(c(1, -1/4), c(-1/4,1))
test
class(test)
mat <- makeCacheMatrix(test)
mat
inv <- cacheSolve(mat)
inv <- cacheSolve(mat)
test %*% inv
identical("15bb1317789a2932454602aad05acaf047cab32a", "15bb1317789a2932454602aad05acaf047cab32a")
identical("a8478a4e61593e85b75baa7470f82298fc19d112", "a8478a4e61593e85b75baa7470f82298fc19d112")
identical("eb7e37765429f904ad9a421f31a3d5cf69971d29", "c6bb93c4534688ea9e696601297c2ad3df7a4c48")
setwd("/Users/meganpitman/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming")
data <- read.csv("KAFBexport151001to161001duplicaterows.csv")
names(data)
species <- split(data, data$Group_Species_LatinName)
species
sapply(species, function(x) colSums(x[,]))
install.packages(dplyer)
install.packages(dplyr)
install.packages("dplyr")
load("dplyr")
library(dplyr)
dim(data)
str(data)
head(data$DateTaken)
head(data)
?as.Date
?strptime
?as.Date
?strptime
4436+7368
4436+7368+1500
4436+7368+2000
mutate(DateTaken=as.Date(data, format=%D %H:%M)
mutate(DateTaken=as.Date(data, format="%D %H:%M")
)
head(data)
data$DateTaken
class(data$DateTaken)
mutate(data, DateTaken=as.Date(format="%D %H:%M")
)
mutate(data, DateTaken=as.Date(DateTaken, format="%D %H:%M", tz="MST"))
data$DateTaken
class(data$DateTaken)
mutate(data, DateTaken=as.Date(DateTaken, format="%D %H:%M", tz="MST"))
head(data)
mutate(data, DateTaken=as.Date(DateTaken, format="%D %H:%M", tz="MST"))
class(data$DateTaken)
head(data$DateTaken)
mutate(data, DateTaken=as.character(DateTaken)
)
class(data$DateTaken)
data <- mutate(data, DateTaken=as.character(DateTaken))
class(data$DateTaken)
data <- mutate(data, DateTaken=as.Date(DateTaken, format="%D %H:%M"))
class(data$DateTaken)
data <- mutate(data, year = as.POSIXlt(DateTaken)$year + 1900)
chicago <- readRDS("chicago.rds")
getwd()
chicago <- readRDS("chicago.rds")
head(chicago)
class(chicago$date)
chicago <- mutate(chicago, year = as.POSIXlt(date)&year +1900)
chicago <- mutate(chicago, date = as.POSIXlt(date))
x <- Sys.time()
class(x)
?as.POSIXlt
data <- mutate(data, DateTaken=as.character(DateTaken))
class(data$DateTaken)
data <- mutate(data, DateTaken=as.POSIXlt(DateTaken, tz="MST", format="%D %H:%M"))
class(data$DateTaken)
data <- mutate(data, DateTaken=strptime(DateTaken, "%D %H:%M"))
date <- data$DateTaken
date
data <- read.csv("KAFBexport151001to161001duplicaterows.csv")
head(data$DateTaken)
class(data$DateTaken)
data$DateTaken
date <- data$DateTaken
date
date <- as.character(date)
class(date)
date <- strptime(date, "%D %H:%M")
class(date)
class(data$DateTaken)
data <- mutate(data, year=as.character(strptime(DateTaken, "%D %H:%M"))
)
class(data$DateTaken)
head(data)
class(data$year)
data <- mutate(data, year=strptime(DateTaken, "%D %H:%M")))
data <- mutate(data, year=strptime(DateTaken, "%D %H:%M"))
class(date)
data <- read.csv("KAFBexport151001to161001duplicaterows.csv")
data$date <- date
names(data)
class(data$date)
data <- mutate(data, year = as.POSIXlt(date)$year + 1900)
head(data)
unclass(data$date)
data$date
date
data <- read.csv("KAFBexport151001to161001duplicaterows.csv")
data$DateTaken
date <- data$DateTaken
date
date <- as.character(date)
date
class(date)
date <- strptime(date, "%D %H:%M")
date
date <- data$DateTaken
date
date <- as.character(date)
date
class(date)
date <- strptime(date, "%D %H:%M")
date
head(data$DateTaken)
?as.Date
?as.POSIXlt
class(date)
date <- data$DateTaken
date <- as.character(date)
class(date)
date <- strptime(date, "%m/%d/%y %H:%M")
date
class(date)
data <- read.csv("KAFBexport151001to161001duplicaterows.csv")
data <- mutate(data, DateTaken=as.character(DateTaken))
class(data$date)
class(data$DateTaken)
data <- mutate(data, DateTaken=strptime(DateTaken, "%m/%d/%y %H:%M"))
data <- read.csv("KAFBexport151001to161001duplicaterows.csv")
date <- data$DateTaken
date <- as.character(date)
date <- strptime(date, "%m/%d/%y %H:%M")
class(date)
class(date)
data <- mutate(data, DateTaken=date)
data$DateTaken <- date
class(data$DateTaken)
data$DateTaken
sum(as.na(date$DateTaken)
)
sum(is.na(date$DateTaken))
is.na(date$DateTaken)
is.na(date)
sum(is.na(date))
date$mon
data <- mutate(data, month=DateTaken$mon)
date <- as.POSIXct(date)
class(date)
date$mon
chicago <- readRDS("chicago.rds")
head(chicago)
class(chicago$date)
chicago <- mutate(chicago, year = as.POSIXlt(date)$year+1900)
date <- data$DateTaken ##Set DateTaken column to date vector
date <- as.character(date) ##Change date vector class to character
date <- strptime(date, "%m/%d/%y %H:%M") ##Change date vector class to POSIX
class(date) ##Check that it is the desired class
date <- as.POSIXct(date)
class(date)
data$DateTaken <- date ##replace DateTaken column (formatted as levels) with date format
class(data$DateTaken) ##Check that column still has POSIX format
data <- mutate(data, year=as.POSIXlt(DateTaken)$year +1900)
rm(list=ls())
data <- read.csv("KAFBexport151001to161001duplicaterows.csv")
library(dplyr)
date <- data$DateTaken ##Set DateTaken column to date vector
date <- as.character(date) ##Change date vector class to character
date <- strptime(date, "%m/%d/%y %H:%M") ##Change date vector class to POSIX
class(date) ##Check that it is the desired class
date <- as.POSIXct(date)
class(date)
data$DateTaken <- date ##replace DateTaken column (formatted as levels) with date format
data$DateTaken
data <- mutate(data, year=as.POSIXlt(DateTaken)$year +1900)
data <- mutate(data, year=as.POSIXlt(DateTaken$data)$year +1900)
data <- mutate(data, year=as.POSIXlt(data$DateTaken)$year +1900)
head(data)
tail(data)
data <- mutate(data, month=as.POSIXlt(data$DateTaken)$mon)
head(data)
data <- mutate(data, month=as.POSIXlt(data$DateTaken)$mon+1)
head(data)
tail(data)
data$count <- 1
head(data)
data <- mutate(data, GroupTotal=Group_Male + Group_Female + Group_Juvenile + Group_Indeterminate)
head(data)
with(data, tapply(GroupTotal, list(Group_Species_LatinName, year), sum))
with(data, tapply(GroupTotal, list(Group_Species_LatinName, month), sum))
