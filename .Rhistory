1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
seq(5,10, length=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
seq(1:length(my_seq))
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char, "Megan")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix(1:20, nrow=4, ncol=5)
my_matrix<-matrix(1:20, nrow=4, ncol=5)
my_matrix2<-matrix(1:20, nrow=4, ncol=5)
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
info()
my_matrix2 <- matrix(1:20, 4,5)
play()
matrix(1:20, nrow=4, ncol=5)
mine<- matrix(1:20, nrow=4, ncol=5)
mine
nxt()
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients<- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data<-data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)<-my_data
colnames(my_data)<-cnames
my_data
bye()
x<-c("a", "b", "c", "d")
for(i in 1:4){
print(x[i])
}
for(i in seq_along(x)){
print(x[i])
}
for(letter in x){
print(letters)
}
for(letter in x){
print(letter)
}
for(i in 1:4) print(x[i])
x<-matrix(1:6,2,3)
x
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i,j])
}
}
while(count < 10) {
print(count)
count <- count + 1
}
count<-0
while(count < 10) {
print(count)
count <- count + 1
}
z<-5
while(z>=3 && z<=10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coint == 1) {
z <- z+1
} else {
z <- z-1
}
}
while(z>=3 && z<=10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {
z <- z+1
} else {
z <- z-1
}
}
add2<- function(x,y) {
x+y
}
add2(5,3)
above <- function(x,n) {
use <- x > n
x[use]
}
setwd("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/Rprogramming/courseraRProgramming")
pollutantmean <- function(directory, pollutant, id = 1:332) {
setwd(directory)
filenames <- list.files(directory)
subset    <- filenames[id]
files     <- lapply(subset, read.csv)
totaldata <- do.call(rbind, files)
sulfate <- totaldata[,2]
nitrate <- totaldata[,3]
if (pollutant == "sulfate") { p <- sulfate
} else { p <- nitrate
}
mean(p, na.rm=TRUE)
}
args(pollutantmean)
pollutantmean(directory = "~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata",
pollutant = "nitrate", id = 1:2)
complete <- function(directory, id = 1:332) {
setwd(directory)
filenames <- list.files(directory)
subset    <- filenames[id]
files     <- lapply(subset, read.csv)
subnames  <- substr(subset, 1, nchar(subset)-4)
subnameslist <- as.list(subnames)
filesID <- Map(cbind, files, id = subnameslist)
totaldata <- do.call(rbind, filesID)
totaldata$nobs <- complete.cases(totaldata)
aggregate(nobs ~ id, totaldata, sum)
}
complete("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata",
id = c(2,4,6))
setwd("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming")
getwd()
corr <- function(directory, threshold = 0) {
currentwd <- getwd()
source("complete.R")
setwd(directory)
info <- complete(directory)
info$min <- ifelse(info$nobs > threshold, TRUE, FALSE)
screenlist <- info[info$min == TRUE, ]
subset <- as.character(screenlist$id)
filelist <- paste(subset, ".csv", sep = "")
data <- lapply(filelist, read.csv)
sapply(data, function(data)cor(data[,2], data[,3], use="complete.obs"))
setwd(currentwd)
}
corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata",
threshold = 5000)
complete <- function(directory, id = 1:332) {
setwd(directory)
filenames <- list.files(directory)
subset    <- filenames[id]
files     <- lapply(subset, read.csv)
subnames  <- substr(subset, 1, nchar(subset)-4)
subnameslist <- as.list(subnames)
filesID <- Map(cbind, files, id = subnameslist)
totaldata <- do.call(rbind, filesID)
totaldata$nobs <- complete.cases(totaldata)
aggregate(nobs ~ id, totaldata, sum)
}
corr <- function(directory, threshold = 0) {
setwd(directory)
info <- complete(directory)
info$min <- ifelse(info$nobs > threshold, TRUE, FALSE)
screenlist <- info[info$min == TRUE, ]
subset <- as.character(screenlist$id)
filelist <- paste(subset, ".csv", sep = "")
data <- lapply(filelist, read.csv)
sapply(data, function(data)cor(data[,2], data[,3], use="complete.obs"))
}
corr <- function(directory, threshold = 0) {
setwd(directory)
info <- complete(directory)
info$min <- ifelse(info$nobs > threshold, TRUE, FALSE)
screenlist <- info[info$min == TRUE, ]
subset <- as.character(screenlist$id)
filelist <- paste(subset, ".csv", sep = "")
data <- lapply(filelist, read.csv)
sapply(data, function(data)cor(data[,2], data[,3], use="complete.obs"))
}
corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata",
threshold = 400)
min <- 5000
screen$nobs
screen <- complete("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata")
screen$nobs
class(screen$nobs)
screen$min <- ifelse(screen$nobs > min, TRUE, FALSE)
head(screen)
screenlist <- screen[screen$min == TRUE, ]
head(screenlist)
class(screenlist)
length(screenlist)
subset <- as.character(screenlist$id)
subset
length(subset)
if(length(subset)==0) {
numeric(length=0)}
corr <- function(directory, threshold = 0) {
setwd(directory)
info <- complete(directory)
info$min <- ifelse(info$nobs > threshold, TRUE, FALSE)
screenlist <- info[info$min == TRUE, ]
subset <- as.character(screenlist$id)
if(length(subset) == 0) {
numeric(length=0)
} else {
filelist <- paste(subset, ".csv", sep = "")
data <- lapply(filelist, read.csv)
sapply(data, function(data)cor(data[,2], data[,3], use="complete.obs"))
}
}
corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata",
threshold = 5000)
corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata",
threshold = 500)
screen$nobs
screen$min <- ifelse(screen$nobs > min, TRUE, FALSE)
head(screen)
screenlist <- screen[screen$min == TRUE, ]
screenlist
screenlist <- screen[screen$min == TRUE, ]
class(screenlist)
head(screenlist)
min <- 500
screen$nobs
class(screen$nobs)
screen$min <- ifelse(screen$nobs > min, TRUE, FALSE)
head(screen)
screenlist <- screen[screen$min == TRUE, ]
class(screenlist)
head(screenlist)
tail(screenlist)
length(screenlist)
screenlist
corr <- function(directory, threshold = 0) {
currentwd <- getwd()
setwd(directory)
info <- complete(directory)
info$min <- ifelse(info$nobs > threshold, TRUE, FALSE)
screenlist <- info[info$min == TRUE, ]
subset <- as.character(screenlist$id)
if(length(subset) == 0) {
numeric(length=0)
} else {
filelist <- paste(subset, ".csv", sep = "")
data <- lapply(filelist, read.csv)
sapply(data, function(data)cor(data[,2], data[,3], use="complete.obs"))
}
setwd(currentwd)
}
corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata",
threshold = 500)
corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata",
threshold = 5000)
corr <- function(directory, threshold = 0) {
setwd(directory)
info <- complete(directory)
info$min <- ifelse(info$nobs > threshold, TRUE, FALSE)
screenlist <- info[info$min == TRUE, ]
subset <- as.character(screenlist$id)
if(length(subset) == 0) {
numeric(length=0)
} else {
filelist <- paste(subset, ".csv", sep = "")
data <- lapply(filelist, read.csv)
sapply(data, function(data)cor(data[,2], data[,3], use="complete.obs"))
}
}
corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata",
threshold = 5000)
getwd()
setwd("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming")
source("pollutantmean.R")
pollutantmean("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", "sulfate", 1:10)
pollutantmean("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", "nitrate", 70:72)
pollutantmean("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", "sulfate", 34)
pollutantmean("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", "nitrate")
setwd("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming")
source("complete.R")
cc <- complete("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
setwd("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming")
source("corr.R")
cr <- corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", 2000)
n <- length(cr)
cr <- corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
n <- length(cr)
cr <- corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", 1000)
cr <- corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", 2000)
n <- length(cr)
cr <- corr("~/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming/specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
x <- list(a=1:5, b=rnorm(10))
lapply(x,mean)
x <- list(a=matrix(1:4,2,2), b=matrix(1:6,3,2))
x
lapply(x, function(elt) elt[,1])
x <- matrix(rnorm(200), 20, 10)
x
apply(x, 2, mean)
apply(x,1,sum)
colSums(x)
colMeans(x)
rowSums(x)
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}
noise(5,1,2)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
lapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
getwd()
setwd("/Users/meganpitman/Dropbox/Projects/Classes/Coursera/DataScienceSpecialization/RProgramming/courseraRProgramming")
data <- read.csv("KAFBexport151001to161001duplicaterows.csv")
names(data)
species <- split(data, data$Group_Species_LatinName)
species
names(data)
sapply(s, function(x) colSums(x[,c("Group_Male", "Group_Female", "Group_Juvenile",
"Group_Indeterminate")]))
sapply(s, function(x) colSums(x[,35]))
sapply(species, function(x) colSums(x[,35]))
sapply(species, function(x) colSums(x[,35:38]))
names(data)
month <- split(data, data$CameraPosition_Grid)
grid <- split(data, data$CameraPosition_Grid)
grid
names(data)
?count
?tapply
data$CameraPosition_Grid
data$CameraPosition_Grid <- as.character(data$CameraPosition_Grid)
data$CameraPosition_Grid
levels(data$CameraPosition_Grid)
data$CameraPosition_Grid <- as.levels(data$CameraPosition_Grid)
data$CameraPosition_Grid <- as.factor(data$CameraPosition_Grid)
levels(data$CameraPosition_Grid)
?str
printmessage <- function(x) {
if(x >0)
print("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(X)
}
printmessage(5)
printmessage(1)
printmessage(x=1)
printmessage(NA)
printmessage2 <- function(x) {
if(is.na(x))
print("x is a missing value!")
else if(x>0)
print("x is greater than zero")
else if(x<0)
print("x is less than or equal to zero")
invisible(x)
}
x <- log(-1)
printmessage2(x)
mean(x)
rm(list=ls())
mean(x)
traceback()
lm(y~x)
rm(list=ls())
lm(y~x)
traceback()
debug(lm)
lm(y~x)
options(error=recover)
read.csv("nosuchfile")
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
rm(list=ls())
library(datasets)
data(iris)
?iris
iris
names(iris)
tapply(iris$Sepal.Length, iris$Species, Mean)
tapply(iris$Sepal.Length, iris$Species, mean)
round(6.588)
sapply(iris, mean)
lapply(iris, mean)
names(iris)
apply(iris[,1:4], 2, mean)
?apply
colMeans(iris)
